"use client"

import { useUser } from "@clerk/nextjs"
import { useParams, useSearchParams } from "next/navigation"
import PlaygroundHeader from "../_components/PlaygroundHeader"
import ChatSection from "../_components/ChatSection"
import WebsiteDesign from "../_components/WebsiteDesign"
import { detectPackagesFromFiles } from "@/lib/package-detector"
import axios from "axios"
import { useEffect, useRef, useState, useId } from "react"

export type Frame = {
  projectId: string
  frameId: string
  designCode: string
  chatMessages: Messages[]
  projectFiles?: ProjectFile[]
}

export type Messages = {
  role: string
  content: string
}

export type ProjectFile = {
  path: string
  content: string
}

const Prompt = `
You are an expert Next.js and TypeScript developer. Generate complete, production-ready Next.js projects with BEAUTIFUL, PROFESSIONAL CSS styling.

User Request: {userInput}

{databaseContext}

CRITICAL INSTRUCTIONS:

1. **Always Generate Multi-File Next.js Projects** - Unless the user is just greeting you (like "Hi", "Hello"), ALWAYS generate a complete Next.js project structure with TypeScript.

2. **Database Integration** - {databaseInstructions}

3. **MUST Include Beautiful CSS Styling**:
   - Create a public/style.css file with comprehensive, professional CSS
   - Include styles for buttons, inputs, cards, typography, colors, and layouts
   - Add hover effects, transitions, and smooth animations
   - Use a cohesive color palette (choose 3-5 colors that work well together)
   - Make it responsive with media queries
   - Add shadows, rounded corners, and modern design elements

4. **Required Files**:
   - app/page.tsx (main page component)
   - app/layout.tsx (root layout that links the CSS file)
   - public/style.css (comprehensive CSS with all styling)
   - Any additional components in components/ folder if needed
   {databaseFiles}

5. **app/layout.tsx Structure** - MUST link the CSS file:
   \`\`\`typescript
   import type { Metadata } from "next"
   import "./globals.css"

   export const metadata: Metadata = {
     title: "Generated App",
     description: "Generated by AI",
   }

   export default function RootLayout({
     children,
   }: {
     children: React.ReactNode
   }) {
     return (
       <html lang="en">
         <head>
           <link rel="stylesheet" href="/style.css" />
         </head>
         <body>{children}</body>
       </html>
     )
   }
   \`\`\`

6. **app/globals.css Structure** - Basic Tailwind setup:
   \`\`\`css
   @tailwind base;
   @tailwind components;
   @tailwind utilities;
   \`\`\`

7. **public/style.css Structure** - MUST include comprehensive styling:
   \`\`\`css
   /* Reset and Base Styles */
   * {
     margin: 0;
     padding: 0;
     box-sizing: border-box;
   }

   body {
     font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', 'Oxygen', 'Ubuntu', 'Cantarell', sans-serif;
     line-height: 1.6;
     color: #333;
     background: #f8fafc;
   }

   /* Container */
   .container {
     max-width: 1200px;
     margin: 0 auto;
     padding: 20px;
   }

   /* Buttons */
   button, .btn {
     height: 55px;
     background: #F2F2F2;
     border-radius: 11px;
     border: 0;
     outline: none;
     color: #ffffff;
     font-size: 13px;
     font-weight: 700;
     background: linear-gradient(180deg, #363636 0%, #1B1B1B 50%, #000000 100%);
     box-shadow: 0px 0px 0px 0px #FFFFFF, 0px 0px 0px 0px #000000;
     transition: all 0.3s cubic-bezier(0.15, 0.83, 0.66, 1);
   }

   button:hover, .btn:hover {
     box-shadow: 0px 0px 0px 2px #FFFFFF, 0px 0px 0px 4px #0000003a;
   }

   /* Inputs */
   input, textarea, select {
     width: 100%;
     padding: 12px 16px;
     font-size: 16px;
     border: 2px solid #e2e8f0;
     border-radius: 8px;
     transition: all 0.3s ease;
     background: white;
   }

   input:focus, textarea:focus, select:focus {
     outline: none;
     border-color: #667eea;
     box-shadow: 0 0 0 3px rgba(102, 126, 234, 0.1);
   }

   /* Cards */
   .card {
     background: white;
     border-radius: 16px;
     padding: 24px;
     box-shadow: 0 4px 6px rgba(0, 0, 0, 0.07);
     transition: all 0.3s ease;
   }

   .card:hover {
     transform: translateY(-4px);
     box-shadow: 0 12px 24px rgba(0, 0, 0, 0.12);
   }

   /* Typography */
   h1 {
     font-size: 3rem;
     font-weight: 800;
     margin-bottom: 1rem;
     color: #1e293b;
   }

   h2 {
     font-size: 2.25rem;
     font-weight: 700;
     margin-bottom: 0.75rem;
     color: #334155;
   }

   p {
     font-size: 1.125rem;
     line-height: 1.7;
     color: #64748b;
     margin-bottom: 1rem;
   }
   \`\`\`

8. **Response Format**:
   You MUST respond with a JSON object containing an array of files and image URLs.
   
   {
     "files": [
       {
         "path": "app/page.tsx",
         "content": "... full file content ..."
       },
       {
         "path": "app/layout.tsx",
         "content": "... full layout file with CSS link ..."
       },
       {
         "path": "app/globals.css",
         "content": "... Tailwind CSS setup ..."
       },
       {
         "path": "public/style.css",
         "content": "... comprehensive CSS styling ..."
       }
       {databaseFilesExample}
     ],
     "imageUrls": ["url1", "url2", ...]
   }

9. **Code Quality**:
   - Use modern React patterns (hooks, functional components)
   - Implement proper TypeScript types
   - Add responsive design with CSS media queries
   - Use semantic HTML elements
   - Make the design beautiful and professional
   - Follow Next.js 14+ App Router conventions
   {databaseBestPractices}

10. **For Greetings**: If user just says "Hi" or "Hello", respond with:
   {
     "message": "Hello! I'm ready to help you build amazing Next.js projects with beautiful CSS styling. What would you like to create?"
   }

Now, create an amazing Next.js project for: {userInput}
`

function Playground() {
  const { user, isLoaded } = useUser()
  const { projectId } = useParams()
  const params = useSearchParams()
  const frameId = params.get("frameId")
  const [frameDetail, setFrameDetail] = useState<Frame>()
  const [loading, setLoading] = useState(false)
  const [messages, setMessages] = useState<Messages[]>([])
  const [projectFiles, setProjectFiles] = useState<ProjectFile[]>([])
  const [saveTrigger, setSaveTrigger] = useState(0)
  const [designWidth, setDesignWidth] = useState(800)
  const [generatingFiles, setGeneratingFiles] = useState<{ path: string; status: "pending" | "complete" }[]>([])
  const [isRunningCommands, setIsRunningCommands] = useState(false)
  const [currentStep, setCurrentStep] = useState("")
  const [aiThinking, setAiThinking] = useState(false)
  const [imageUrls, setImageUrls] = useState<string[]>([])
  const [thinkingTime, setThinkingTime] = useState(0)
  const [deploymentUrl, setDeploymentUrl] = useState<string | null>(null)
  const thinkingTimerRef = useRef<NodeJS.Timeout | null>(null)
  const popoverId = useId() // Generate stable ID for Popover

  // Default project files to ensure iframe has content
  const defaultProjectFiles: ProjectFile[] = [
    {
      path: "app/page.tsx",
      content: `
import React from 'react';

export default function Home() {
  return (
    <div className="container">
      <h1>Welcome to Your Project</h1>
      <p>This is a default page to get you started. Click elements to edit them!</p>
      <button className="btn">Click Me</button>
    </div>
  );
}
      `,
    },
    {
      path: "app/layout.tsx",
      content: `
import type { Metadata } from "next"
import "./globals.css"

export const metadata: Metadata = {
  title: "Generated App",
  description: "Generated by AI",
}

export default function RootLayout({
  children,
}: {
  children: React.ReactNode
}) {
  return (
    <html lang="en">
      <head>
        <link rel="stylesheet" href="/style.css" />
      </head>
      <body>{children}</body>
    </html>
  )
}
      `,
    },
    {
      path: "app/globals.css",
      content: `
@tailwind base;
@tailwind components;
@tailwind utilities;
      `,
    },
    {
      path: "public/style.css",
      content: `
/* Reset and Base Styles */
* {
  margin: 0;
  padding: 0;
  box-sizing: border-box;
}

body {
  font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', 'Oxygen', 'Ubuntu', 'Cantarell', sans-serif;
  line-height: 1.6;
  color: #333;
  background: #f8fafc;
}

/* Container */
.container {
  max-width: 1200px;
  margin: 0 auto;
  padding: 20px;
}

/* Buttons */
button, .btn {
  height: 55px;
  background: #F2F2F2;
  border-radius: 11px;
  border: 0;
  outline: none;
  color: #ffffff;
  font-size: 13px;
  font-weight: 700;
  background: linear-gradient(180deg, #363636 0%, #1B1B1B 50%, #000000 100%);
  box-shadow: 0px 0px 0px 0px #FFFFFF, 0px 0px 0px 0px #000000;
  transition: all 0.3s cubic-bezier(0.15, 0.83, 0.66, 1);
}

button:hover, .btn:hover {
  box-shadow: 0px 0px 0px 2px #FFFFFF, 0px 0px 0px 4px #0000003a;
}

/* Inputs */
input, textarea, select {
  width: 100%;
  padding: 12px 16px;
  font-size: 16px;
  border: 2px solid #e2e8f0;
  border-radius: 8px;
  transition: all 0.3s ease;
  background: white;
}

input:focus, textarea:focus, select:focus {
  outline: none;
  border-color: #667eea;
  box-shadow: 0 0 0 3px rgba(102, 126, 234, 0.1);
}

/* Cards */
.card {
  background: white;
  border-radius: 16px;
  padding: 24px;
  box-shadow: 0 4px 6px rgba(0, 0, 0, 0.07);
  transition: all 0.3s ease;
}

.card:hover {
  transform: translateY(-4px);
  box-shadow: 0 12px 24px rgba(0, 0, 0, 0.12);
}

/* Typography */
h1 {
  font-size: 3rem;
  font-weight: 800;
  margin-bottom: 1rem;
  color: #1e293b;
}

h2 {
  font-size: 2.25rem;
  font-weight: 700;
  margin-bottom: 0.75rem;
  color: #334155;
}

p {
  font-size: 1.125rem;
  line-height: 1.7;
  color: #64748b;
  margin-bottom: 1rem;
}
      `,
    },
    {
      path: "package.json",
      content: JSON.stringify(
        {
          name: "nextjs-project",
          version: "0.1.0",
          private: true,
          scripts: {
            dev: "next dev --port 3000",
            build: "next build",
            start: "next start",
          },
          dependencies: {
            next: "14.2.5",
            react: "^18.3.1",
            "react-dom": "^18.3.1",
          },
          devDependencies: {
            "@types/node": "^20",
            "@types/react": "^18",
            "@types/react-dom": "^18",
            typescript: "^5",
            tailwindcss: "^3.4.1",
            postcss: "^8",
            autoprefixer: "^10.4.19",
          },
        },
        null,
        2,
      ),
    },
  ]

  useEffect(() => {
    if (isLoaded && frameId && projectId && user) {
      GetFrameDetails()
      checkDeployment()
    } else if (!user) {
      console.log("User not authenticated")
      // Initialize with default files if no user is authenticated
      setProjectFiles(defaultProjectFiles)
    }
  }, [frameId, projectId, isLoaded, user])

  useEffect(() => {
    const timer = setTimeout(() => {
      setSaveTrigger((prev) => prev + 1)
    }, 1000)

    return () => clearTimeout(timer)
  }, [projectFiles])

  const saveFrameData = async () => {
    if (!user || !frameId || !projectId || !messages.length) return
    try {
      await axios.put("/api/frames", {
        designCode: JSON.stringify(projectFiles),
        chatMessages: messages,
        frameId,
        projectId,
      })
      console.log("Frame data saved successfully")
      setFrameDetail((prev) =>
        prev
          ? { ...prev, chatMessages: messages, projectFiles }
          : { projectId: projectId as string, frameId, designCode: "", chatMessages: messages, projectFiles },
      )
    } catch (error: any) {
      console.error("Error saving frame data:", error.message)
      setMessages((prev) => [...prev, { role: "assistant", content: `Failed to save frame data: ${error.message}` }])
    }
  }

  const checkDeployment = async () => {
    try {
      const cachedUrl = localStorage.getItem(`deploymentUrl_${projectId}`)
      if (cachedUrl) {
        setDeploymentUrl(cachedUrl)
        return
      }

      const response = await axios.get(`/api/deploy?projectId=${projectId}`, {
        validateStatus: (status) => status < 500,
      })
      if (response.status === 200 && response.data.deployed && response.data.url) {
        setDeploymentUrl(response.data.url)
        localStorage.setItem(`deploymentUrl_${projectId}`, response.data.url)
      }
    } catch (error: any) {
      console.error("Failed to check deployment status:", error.message)
      setMessages((prev) => [
        ...prev,
        { role: "assistant", content: `Failed to check deployment status: ${error.message}` },
      ])
    }
  }

  useEffect(() => {
    if (saveTrigger > 0) {
      saveFrameData()
    }
  }, [saveTrigger])

  const handleManualSave = () => {
    saveFrameData()
  }

  const GetFrameDetails = async () => {
    if (!user || !frameId || !projectId) return
    try {
      const result = await axios.get(`/api/frames?frameId=${frameId}&projectId=${projectId}`)
      console.log("Fetched frame details:", result.data)
      setFrameDetail(result.data)
      const fetchedMessages = result.data.chatMessages || []
      setMessages(fetchedMessages)
      if (result.data.designCode) {
        try {
          const parsed = JSON.parse(result.data.designCode)
          if (Array.isArray(parsed) && parsed.length > 0) {
            setProjectFiles(parsed)
          } else {
            console.warn("No valid project files found in designCode, using default files")
            setProjectFiles(defaultProjectFiles)
          }
        } catch (error: any) {
          console.error("Error parsing designCode:", error.message)
          setProjectFiles(defaultProjectFiles)
          setMessages((prev) => [
            ...prev,
            { role: "assistant", content: `Failed to parse project files: ${error.message}. Using default files.` },
          ])
        }
      } else {
        console.log("No designCode found, initializing with default files")
        setProjectFiles(defaultProjectFiles)
      }
      if (result.data.imageUrls) {
        setImageUrls(result.data.imageUrls)
      }
    } catch (error: any) {
      console.error("Error fetching frame details:", error.message)
      setMessages((prev) => [
        ...prev,
        { role: "assistant", content: `Failed to fetch frame details: ${error.message}. Using default files.` },
      ])
      setProjectFiles(defaultProjectFiles)
    }
  }

  const SendMessage = async (userInput: string, selectedModel: string, dbConnection?: any, files?: File[]) => {
    if (!user || !frameId || !projectId) {
      console.error("Missing required params for SendMessage: user, frameId, projectId")
      setMessages((prev) => [
        ...prev,
        { role: "assistant", content: "Please sign in and ensure a valid project is selected." },
      ])
      return
    }

    try {
      const newUserMsg: Messages = { role: "user", content: userInput }
      setMessages((prev) => [...prev, newUserMsg])
      setLoading(true)
      setGeneratingFiles([])
      setAiThinking(true)
      setCurrentStep("")

      let fileContents: string[] = []
      if (files && files.length > 0) {
        fileContents = await Promise.all(
          files.map(async (file) => {
            if (file.size > 10 * 1024 * 1024) {
              return `File: ${file.name} (large file, please process)`
            }
            const text = await file.text()
            return `File: ${file.name}\nContent:\n\`\`\`\n${text}\n\`\`\``
          }),
        )
      }

      let databaseContext = ""
      let databaseInstructions = "No database is connected. Generate a standalone application."
      let databaseFiles = ""
      let databaseFilesExample = ""
      let databaseBestPractices = ""

      if (dbConnection) {
        if (dbConnection.provider === "supabase") {
          databaseContext = `
DATABASE CONNECTED: Supabase
Project: ${dbConnection.config.projectName}
Project ID: ${dbConnection.config.projectId}
Region: ${dbConnection.config.region}
`
          databaseInstructions = `
The user has connected a Supabase database. You MUST integrate Supabase into the generated project:
- Create a lib/supabase.ts file with Supabase client configuration
- Use environment variables for Supabase URL and anon key
- Include database operations in your components (queries, mutations)
- Add proper error handling for database operations
- Use Supabase's real-time features if appropriate for the use case
`
          databaseFiles = `
   - lib/supabase.ts (Supabase client configuration)
   - .env.local.example (example environment variables)
`
          databaseFilesExample = `,
       {
         "path": "lib/supabase.ts",
         "content": "... Supabase client setup ..."
       },
       {
         "path": ".env.local.example",
         "content": "NEXT_PUBLIC_SUPABASE_URL=your-project-url\\nNEXT_PUBLIC_SUPABASE_ANON_KEY=your-anon-key"
       }
`
          databaseBestPractices = `
   - Use Supabase client-side for real-time subscriptions
   - Use Server Actions for mutations when possible
   - Implement Row Level Security (RLS) policies
   - Handle loading and error states for database operations
`
        } else if (dbConnection.provider === "firebase") {
          databaseContext = `
DATABASE CONNECTED: Firebase
Project: ${dbConnection.connectionName}
Project ID: ${dbConnection.config.projectId}
`
          databaseInstructions = `
The user has connected a Firebase database. You MUST integrate Firebase into the generated project:
- Create a lib/firebase.ts file with Firebase configuration
- Use the provided Firebase config (apiKey, authDomain, projectId, etc.)
- Include Firestore database operations in your components
- Add proper error handling for database operations
- Use Firebase's real-time listeners if appropriate for the use case
`
          databaseFiles = `
   - lib/firebase.ts (Firebase configuration and initialization)
`
          databaseFilesExample = `,
       {
         "path": "lib/firebase.ts",
         "content": "... Firebase initialization with provided config ..."
       }
`
          databaseBestPractices = `
   - Use Firebase client SDK for real-time updates
   - Implement proper security rules
   - Handle loading and error states for database operations
   - Use Firebase collections and documents appropriately
`
        }
      }

      const enhancedPrompt = Prompt.replace(/{userInput}/g, userInput)
        .replace(/{databaseContext}/g, databaseContext)
        .replace(/{databaseInstructions}/g, databaseInstructions)
        .replace(/{databaseFiles}/g, databaseFiles)
        .replace(/{databaseFilesExample}/g, databaseFilesExample)
        .replace(/{databaseBestPractices}/g, databaseBestPractices)

      const fullPrompt = `${enhancedPrompt}\n${fileContents.join("\n")}`

      const result = await fetch("/api/ai-model", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({
          model: selectedModel,
          messages: [{ role: "user", content: fullPrompt }],
        }),
      })

      if (!result.ok) {
        throw new Error(`AI model API error: ${result.status}`)
      }

      setAiThinking(false)
      setCurrentStep(
        dbConnection
          ? `Analyzing your request and integrating ${dbConnection.provider}...`
          : "Analyzing your request...",
      )

      const reader = result.body?.getReader()
      const decoder = new TextDecoder()
      let aiResponse = ""

      while (true) {
        //@ts-ignore
        const { done, value } = await reader?.read()
        if (done) break
        const chunk = decoder.decode(value, { stream: true })
        aiResponse += chunk
      }

      console.log("[v0] Raw AI response length:", aiResponse.length)

      let newProjectFiles: ProjectFile[] = []
      let responseMessage = ""
      let newImageUrls: string[] = []

      setCurrentStep("Preparing project structure...")

      try {
        let jsonStr = aiResponse.trim()
        jsonStr = jsonStr.replace(/```json\s*/g, "").replace(/```\s*/g, "")

        const jsonObjects: string[] = []
        let currentDepth = 0
        let startIndex = -1

        for (let i = 0; i < jsonStr.length; i++) {
          if (jsonStr[i] === "{") {
            if (currentDepth === 0) startIndex = i
            currentDepth++
          } else if (jsonStr[i] === "}") {
            currentDepth--
            if (currentDepth === 0 && startIndex !== -1) {
              jsonObjects.push(jsonStr.substring(startIndex, i + 1))
              startIndex = -1
            }
          }
        }

        console.log("[v0] Found", jsonObjects.length, "potential JSON objects")

        let parsed: any = null
        let parseError: any = null

        for (const objStr of jsonObjects) {
          try {
            parsed = JSON.parse(objStr)
            if (parsed.files || parsed.message) {
              break
            }
          } catch (err) {
            parseError = err
            console.warn("[v0] Failed to parse JSON object:", objStr.substring(0, 100), "...", err)
          }
        }

        if (!parsed && parseError) {
          const fixedJson = jsonStr
            .replace(/\\(?!["\\/bfnrtu])/g, "\\\\")
            .replace(/\n/g, "\\n")
            .replace(/\r/g, "\\r")
            .replace(/\t/g, "\\t")
            .replace(/,\s*}/g, "}")
            .replace(/,\s*]/g, "]")

          try {
            parsed = JSON.parse(fixedJson)
            console.log("[v0] Successfully parsed JSON after fixes")
          } catch (secondError) {
            console.error("[v0] Still failed after fixes:", secondError.message)
            throw new Error(`Failed to parse AI response: ${parseError.message}`)
          }
        }

        if (parsed.files && Array.isArray(parsed.files) && parsed.files.length > 0) {
          newProjectFiles = parsed.files
          newImageUrls = parsed.imageUrls || []
          setCurrentStep("Creating project files...")
          setGeneratingFiles(newProjectFiles.map((f) => ({ path: f.path, status: "pending" })))

          const dbMessage = dbConnection ? ` with ${dbConnection.provider} integration` : ""
          const fileCreationMsg: Messages = {
            role: "assistant",
            content: `Creating ${newProjectFiles.length} files for your project${dbMessage}...`,
          }
          setMessages((prev) => [...prev, fileCreationMsg])

          for (let i = 0; i < newProjectFiles.length; i++) {
            await new Promise((resolve) => setTimeout(resolve, 150))
            setGeneratingFiles((prev) => prev.map((f, idx) => (idx <= i ? { ...f, status: "complete" } : f)))
          }

          setProjectFiles(newProjectFiles)
          setImageUrls(newImageUrls)
          setCurrentStep("")

          const detectedPackages = detectPackagesFromFiles(newProjectFiles)
          const packageInfo =
            detectedPackages.length > 0
              ? ` Detected ${detectedPackages.length} additional packages to install: ${detectedPackages.join(", ")}.`
              : ""

          const dbSuccessMessage = dbConnection
            ? ` Your ${dbConnection.provider} database has been integrated into the project.`
            : ""
          responseMessage = `Successfully created ${newProjectFiles.length} files!${packageInfo}${dbSuccessMessage} Installing dependencies...`
          console.log("[v0] Successfully parsed", newProjectFiles.length, "files")
        } else if (parsed.message) {
          responseMessage = parsed.message
          setCurrentStep("")
        } else {
          responseMessage =
            "I generated a response, but couldn't find any files. Initializing with default project files."
          setProjectFiles(defaultProjectFiles)
          setCurrentStep("")
        }
      } catch (error: any) {
        console.error("[v0] Error parsing AI response:", error)
        responseMessage = `I had trouble parsing the response. Error: ${error.message}. Initializing with default project files.`
        setProjectFiles(defaultProjectFiles)
        setCurrentStep("")
        setGeneratingFiles([])
      }

      const newAiMsg: Messages = { role: "assistant", content: responseMessage }
      setMessages((prev) => [...prev, newAiMsg])
      setFrameDetail((prev) =>
        prev
          ? {
              ...prev,
              chatMessages: [...(prev?.chatMessages || []), newAiMsg],
              projectFiles: newProjectFiles.length > 0 ? newProjectFiles : defaultProjectFiles,
            }
          : {
              projectId: projectId as string,
              frameId,
              designCode: "",
              chatMessages: [newAiMsg],
              projectFiles: newProjectFiles.length > 0 ? newProjectFiles : defaultProjectFiles,
            },
      )

      setTimeout(() => {
        setSaveTrigger((prev) => prev + 1)
      }, 500)

      setLoading(false)
    } catch (error: any) {
      setLoading(false)
      setAiThinking(false)
      setCurrentStep("")
      setGeneratingFiles([])
      console.error("Error sending message:", error)
      const errorMsg: Messages = {
        role: "assistant",
        content: `Sorry, I encountered an error: ${error.message}. Initializing with default project files.`,
      }
      setMessages((prev) => [...prev, errorMsg])
      setProjectFiles(defaultProjectFiles)
    }
  }

  useEffect(() => {
    if (aiThinking) {
      setThinkingTime(0)
      thinkingTimerRef.current = setInterval(() => {
        setThinkingTime((prev) => prev + 0.1)
      }, 100)
    } else {
      if (thinkingTimerRef.current) {
        clearInterval(thinkingTimerRef.current)
        thinkingTimerRef.current = null
      }
    }

    return () => {
      if (thinkingTimerRef.current) {
        clearInterval(thinkingTimerRef.current)
      }
    }
  }, [aiThinking])

  return (
    <div className="h-screen flex flex-col">
      <PlaygroundHeader onSave={handleManualSave} />
      <div className="flex flex-1 overflow-hidden">
        <ChatSection
          messages={messages}
          onSend={SendMessage}
          isLoading={loading}
          generatingFiles={generatingFiles}
          isRunningCommands={isRunningCommands}
          currentStep={currentStep}
          aiThinking={aiThinking}
          thinkingTime={thinkingTime}
          projectId={projectId as string}
        />
        <WebsiteDesign
          projectFiles={projectFiles}
          onFilesChange={setProjectFiles}
          width={designWidth}
          onWidthChange={setDesignWidth}
          onAutoRunStart={() => setIsRunningCommands(true)}
          onAutoRunComplete={() => {
            setIsRunningCommands(false)
            setGeneratingFiles([])
          }}
          projectId={projectId as string}
          deploymentUrl={deploymentUrl}
          setDeploymentUrl={setDeploymentUrl}
        />
      </div>
    </div>
  )
}

export default Playground
